namespace WildWildMatch.Tests
{
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using NUnit.Framework;

    partial class Tests
    {
        [GeneratedCode("GenerateTestData.ps1", "1.0")]
        static IEnumerable<TestCaseData> WmExeTestData()
        {
            yield return new TestCaseData(0, @"foo", @"foo", 2);
            yield return new TestCaseData(1, @"bar", @"foo", 3);
            yield return new TestCaseData(1, @"""""", @"''", 4);
            yield return new TestCaseData(0, @"???", @"foo", 5);
            yield return new TestCaseData(1, @"??", @"foo", 6);
            yield return new TestCaseData(0, @"*", @"foo", 7);
            yield return new TestCaseData(0, @"f*", @"foo", 8);
            yield return new TestCaseData(1, @"*f", @"foo", 9);
            yield return new TestCaseData(0, @"*foo*", @"foo", 10);
            yield return new TestCaseData(0, @"*ob*a*r*", @"foobar", 11);
            yield return new TestCaseData(0, @"*ab", @"aaaaaaabababab", 12);
            yield return new TestCaseData(0, @"foo\*", @"foo*", 13);
            yield return new TestCaseData(1, @"foo\*bar", @"foobar", 14);
            yield return new TestCaseData(0, @"f\\oo", @"f\oo", 15);
            yield return new TestCaseData(0, @"*[al]?", @"ball", 16);
            yield return new TestCaseData(1, @"[ten]", @"ten", 17);
            yield return new TestCaseData(2, @"**[!te]", @"ten", 18);
            yield return new TestCaseData(2, @"**[!ten]", @"ten", 19);
            yield return new TestCaseData(0, @"t[a-g]n", @"ten", 20);
            yield return new TestCaseData(1, @"t[!a-g]n", @"ten", 21);
            yield return new TestCaseData(0, @"t[!a-g]n", @"ton", 22);
            yield return new TestCaseData(0, @"t[^a-g]n", @"ton", 23);
            yield return new TestCaseData(0, @"a[]]b", @"a]b", 24);
            yield return new TestCaseData(0, @"a[]-]b", @"a-b", 25);
            yield return new TestCaseData(0, @"a[]-]b", @"a]b", 26);
            yield return new TestCaseData(1, @"a[]-]b", @"aab", 27);
            yield return new TestCaseData(0, @"a[]a-]b", @"aab", 28);
            yield return new TestCaseData(0, @"]", @"]", 29);
            yield return new TestCaseData(1, @"foo*bar", @"foo/baz/bar", 32);
            yield return new TestCaseData(2, @"foo**bar", @"foo/baz/bar", 33);
            yield return new TestCaseData(1, @"foo?bar", @"foo/bar", 34);
            yield return new TestCaseData(1, @"foo[/]bar", @"foo/bar", 35);
            yield return new TestCaseData(1, @"f[^eiu][^eiu][^eiu][^eiu][^eiu]r", @"foo/bar", 36);
            yield return new TestCaseData(0, @"f[^eiu][^eiu][^eiu][^eiu][^eiu]r", @"foo-bar", 37);
            yield return new TestCaseData(0, @"**/foo", @"foo", 38);
            yield return new TestCaseData(0, @"**/foo", @"/foo", 39);
            yield return new TestCaseData(0, @"**/foo", @"bar/baz/foo", 40);
            yield return new TestCaseData(1, @"*/foo", @"bar/baz/foo", 41);
            yield return new TestCaseData(1, @"**/bar*", @"foo/bar/baz", 42);
            yield return new TestCaseData(0, @"**/bar/*", @"deep/foo/bar/baz", 43);
            yield return new TestCaseData(-1, @"**/bar/*", @"deep/foo/bar/baz/", 44);
            yield return new TestCaseData(0, @"**/bar/**", @"deep/foo/bar/baz/", 45);
            yield return new TestCaseData(-1, @"**/bar/*", @"deep/foo/bar", 46);
            yield return new TestCaseData(0, @"**/bar/**", @"deep/foo/bar/", 47);
            yield return new TestCaseData(2, @"**/bar**", @"foo/bar/baz", 48);
            yield return new TestCaseData(0, @"*/bar/**", @"foo/bar/baz/x", 49);
            yield return new TestCaseData(1, @"*/bar/**", @"deep/foo/bar/baz/x", 50);
            yield return new TestCaseData(0, @"**/bar/*/*", @"deep/foo/bar/baz/x", 51);
            yield return new TestCaseData(1, @"a[c-c]st", @"acrt", 54);
            yield return new TestCaseData(0, @"a[c-c]rt", @"acrt", 55);
            yield return new TestCaseData(1, @"[!]-]", @"]", 56);
            yield return new TestCaseData(0, @"[!]-]", @"a", 57);
            yield return new TestCaseData(1, @"\", @"''", 58);
            yield return new TestCaseData(1, @"\", @"\", 59);
            yield return new TestCaseData(1, @"*/\", @"/\", 60);
            yield return new TestCaseData(0, @"*/\\", @"/\", 61);
            yield return new TestCaseData(0, @"foo", @"foo", 62);
            yield return new TestCaseData(0, @"@foo", @"@foo", 63);
            yield return new TestCaseData(1, @"@foo", @"foo", 64);
            yield return new TestCaseData(0, @"\[ab]", @"[ab]", 65);
            yield return new TestCaseData(0, @"[[]ab]", @"[ab]", 66);
            yield return new TestCaseData(0, @"[[:]ab]", @"[ab]", 67);
            yield return new TestCaseData(-1, @"[[::]ab]", @"[ab]", 68);
            yield return new TestCaseData(0, @"[[:digit]ab]", @"[ab]", 69);
            yield return new TestCaseData(0, @"[\[:]ab]", @"[ab]", 70);
            yield return new TestCaseData(0, @"\??\?b", @"?a?b", 71);
            yield return new TestCaseData(0, @"\a\b\c", @"abc", 72);
            yield return new TestCaseData(1, @"''", @"foo", 73);
            yield return new TestCaseData(0, @"**/t[o]", @"foo/bar/baz/to", 74);
            yield return new TestCaseData(0, @"[[:alpha:]][[:digit:]][[:upper:]]", @"a1B", 77);
            yield return new TestCaseData(0, @"[[:digit:][:upper:][:space:]]", @"a", 78);
            yield return new TestCaseData(0, @"[[:digit:][:upper:][:space:]]", @"A", 79);
            yield return new TestCaseData(0, @"[[:digit:][:upper:][:space:]]", @"1", 80);
            yield return new TestCaseData(-1, @"[[:digit:][:upper:][:spaci:]]", @"1", 81);
            yield return new TestCaseData(1, @"[[:digit:][:upper:][:space:]]", @"' '", 82);
            yield return new TestCaseData(1, @"[[:digit:][:upper:][:space:]]", @".", 83);
            yield return new TestCaseData(0, @"[[:digit:][:punct:][:space:]]", @".", 84);
            yield return new TestCaseData(0, @"[[:xdigit:]]", @"5", 85);
            yield return new TestCaseData(0, @"[[:xdigit:]]", @"f", 86);
            yield return new TestCaseData(0, @"[[:xdigit:]]", @"D", 87);
            yield return new TestCaseData(0, @"[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]", @"_", 88);
            yield return new TestCaseData(1, @"[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]", @"â€¦", 89);
            yield return new TestCaseData(0, @"[^[:alnum:][:alpha:][:blank:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]", @"", 90);
            yield return new TestCaseData(0, @"[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]", @".", 91);
            yield return new TestCaseData(0, @"[a-c[:digit:]x-z]", @"5", 92);
            yield return new TestCaseData(0, @"[a-c[:digit:]x-z]", @"b", 93);
            yield return new TestCaseData(0, @"[a-c[:digit:]x-z]", @"y", 94);
            yield return new TestCaseData(1, @"[a-c[:digit:]x-z]", @"q", 95);
            yield return new TestCaseData(0, @"[\\-^]", @"]", 98);
            yield return new TestCaseData(1, @"[\\-^]", @"[", 99);
            yield return new TestCaseData(0, @"[\-_]", @"-", 100);
            yield return new TestCaseData(0, @"[\]]", @"]", 101);
            yield return new TestCaseData(1, @"[\]]", @"\]", 102);
            yield return new TestCaseData(1, @"[\]]", @"\", 103);
            yield return new TestCaseData(-1, @"a[]b", @"ab", 104);
            yield return new TestCaseData(-1, @"a[]b", @"a[]b", 105);
            yield return new TestCaseData(-1, @"ab[", @"ab[", 106);
            yield return new TestCaseData(-1, @"[!", @"ab", 107);
            yield return new TestCaseData(-1, @"[-", @"ab", 108);
            yield return new TestCaseData(0, @"[-]", @"-", 109);
            yield return new TestCaseData(-1, @"[a-", @"-", 110);
            yield return new TestCaseData(-1, @"[!a-", @"-", 111);
            yield return new TestCaseData(0, @"[--A]", @"-", 112);
            yield return new TestCaseData(0, @"[--A]", @"5", 113);
            yield return new TestCaseData(0, @"'[ --]'", @"' '", 114);
            yield return new TestCaseData(1, @"'[ --]'", @"$", 115);
            yield return new TestCaseData(1, @"'[ --]'", @"-", 116);
            yield return new TestCaseData(1, @"'[ --]'", @"0", 117);
            yield return new TestCaseData(0, @"[---]", @"-", 118);
            yield return new TestCaseData(0, @"[------]", @"-", 119);
            yield return new TestCaseData(1, @"[a-e-n]", @"j", 120);
            yield return new TestCaseData(0, @"[a-e-n]", @"-", 121);
            yield return new TestCaseData(0, @"[!------]", @"a", 122);
            yield return new TestCaseData(1, @"[]-a]", @"[", 123);
            yield return new TestCaseData(0, @"[]-a]", @"^", 124);
            yield return new TestCaseData(1, @"[!]-a]", @"^", 125);
            yield return new TestCaseData(0, @"[!]-a]", @"[", 126);
            yield return new TestCaseData(0, @"[a^bc]", @"^", 127);
            yield return new TestCaseData(0, @"[a-]b]", @"-b]", 128);
            yield return new TestCaseData(-1, @"[\]", @"\", 129);
            yield return new TestCaseData(0, @"[\\]", @"\", 130);
            yield return new TestCaseData(1, @"[!\\]", @"\", 131);
            yield return new TestCaseData(0, @"[A-\\]", @"G", 132);
            yield return new TestCaseData(1, @"b*a", @"aaabbb", 133);
            yield return new TestCaseData(1, @"*ba*", @"aabcaa", 134);
            yield return new TestCaseData(0, @"[,]", @",", 135);
            yield return new TestCaseData(0, @"[\\,]", @",", 136);
            yield return new TestCaseData(0, @"[\\,]", @"\", 137);
            yield return new TestCaseData(0, @"[,-.]", @"-", 138);
            yield return new TestCaseData(1, @"[,-.]", @"+", 139);
            yield return new TestCaseData(1, @"[,-.]", @"-.]", 140);
            yield return new TestCaseData(0, @"[\1-\3]", @"2", 141);
            yield return new TestCaseData(0, @"[\1-\3]", @"3", 142);
            yield return new TestCaseData(1, @"[\1-\3]", @"4", 143);
            yield return new TestCaseData(0, @"[[-\]]", @"\", 144);
            yield return new TestCaseData(0, @"[[-\]]", @"[", 145);
            yield return new TestCaseData(0, @"[[-\]]", @"]", 146);
            yield return new TestCaseData(1, @"[[-\]]", @"-", 147);
            yield return new TestCaseData(0, @"-*-*-*-*-*-*-12-*-*-*-m-*-*-*", @"-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1", 150);
            yield return new TestCaseData(-1, @"-*-*-*-*-*-*-12-*-*-*-m-*-*-*", @"-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1", 151);
            yield return new TestCaseData(1, @"-*-*-*-*-*-*-12-*-*-*-m-*-*-*", @"-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1", 152);
            yield return new TestCaseData(0, @"/*/*/*/*/*/*/12/*/*/*/m/*/*/*", @"/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1", 153);
            yield return new TestCaseData(1, @"/*/*/*/*/*/*/12/*/*/*/m/*/*/*", @"/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1", 154);
            yield return new TestCaseData(0, @"**/*a*b*g*n*t", @"abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt", 155);
            yield return new TestCaseData(1, @"**/*a*b*g*n*t", @"abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz", 156);

        }
    }
}
